Programming in Scala
====================

Chapter 1
=========
A Scalable Language

The name Scala stands for "scalable language." You can apply Scala to a 
  wide range of programming tasks, from writing small scripts to building large 
  systems.

Scala is a blend of object-oriented and functional programming concepts in a 
  statically typed language.

1.1 A LANGUAGE THAT GROWS ON YOU
--------------------------------
Growing new types
Growing new control constructs

Java comes with a rich, thread-based concurrency library. Scala programs can use
  it like any other Java API. However, Akka is an additional Scala library that 
  implements an actor model similar to Erlang's.

1.2 WHAT MAKES SCALA SCALABLE?
------------------------------
Combination of object-oriented and functional programming

Scala is object-oriented
Traits are like interfaces in Java, but they can also have method implementations 
  and even fields.

Scala is functional
Functional programming is guided by two main ideas:
1. The first idea is that functions are first-class values.
2. The second main idea of functional programming is that the operations of a 
  program should map input values to output values rather than change data in 
  place

1.3 WHY SCALA?
--------------
Scala is compatible
Scala programs compile to JVM bytecodes. Their run-time performance is usually 
  on par with Java programs. Scala code can call Java methods, access Java fields,
  inherit from Java classes, and implement Java interfaces.

Scala is concise

Scala is high-level

Scala is statically typed

1.4 SCALA'S ROOTS
-----------------
Scala's design has been influenced by many programming languages and ideas in 
  programming language research.

Chapter 2
=========
First Steps in Scala

STEP 1. LEARN TO USE THE SCALA INTERPRETER
------------------------------------------
All of Java's primitive types have corresponding classes in the scala package.

STEP 2. DEFINE SOME VARIABLES
-----------------------------
Scala has two kinds of variables, vals and vars. A val is similar to a final 
  variable in Java. Once initialized, a val can never be reassigned. A var, by 
  contrast, is similar to a non-final variable in Java.

STEP 3. DEFINE SOME FUNCTIONS
-----------------------------
Function definitions start with def.
If the function is recursive, you must explicitly specify the function's result 
  type.

Scala's Unit type is similar to Java's void type

STEP 4. WRITE SOME SCALA SCRIPTS
--------------------------------
Command line arguments to a Scala script are available via a Scala array named 
  args. In Scala, arrays are zero based, and you access an element by specifying 
  an index in parentheses.

STEP 5. LOOP WITH WHILE; DECIDE WITH IF
---------------------------------------
Note that Java's + +i and i++ don't work in Scala. To increment in Scala, you 
  need to say either i = i + 1 or i += 1.

STEP 6. ITERATE WITH FOREACH AND FOR
------------------------------------
Scala enables you to program imperatively, but as you get to know Scala better, 
  you'll likely often find yourself programming in a more functional style.
